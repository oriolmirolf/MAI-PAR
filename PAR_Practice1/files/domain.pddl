(define (domain rescue_drone)
  (:requirements :adl :typing :fluents)
  (:types person location)
  (:predicates
      (drone-at ?l - location)
      (person-at ?p - person ?l - location)
      (obstacle ?l - location)
      (safe-zone ?l - location)
      (adjacent ?l1 - location ?l2 - location)
      (rescued ?p - person)
      (carrying ?p - person)
      (drone-is-carrying-somebody)
  )
  (:functions
      (safe-zone-occupancy)
      (safe-zone-capacity)
  )
  (:action move_drone
      :parameters (?o - location ?f - location)
      :precondition (and (or (adjacent ?o ?f) (adjacent ?f ?o))
                         (drone-at ?o)
                         (not (obstacle ?f)))
      :effect (and (not (drone-at ?o))
                   (drone-at ?f))
  )
  (:action pickup
      :parameters (?p - person ?l - location)
      :precondition (and (drone-at ?l)
                         (person-at ?p ?l)
                         (not (safe-zone ?l))
                         (not (drone-is-carrying-somebody)))
      :effect (and (drone-is-carrying-somebody)
                   (carrying ?p)
                   (not (person-at ?p ?l)))
  )
  (:action drop
      :parameters (?p - person ?l - location)
      :precondition (and (carrying ?p)
                         (drone-at ?l)
                         (safe-zone ?l)
                         (< (safe-zone-occupancy) (safe-zone-capacity)))
      :effect (and (not (drone-is-carrying-somebody))
                   (not (carrying ?p))
                   (rescued ?p)
                   (increase (safe-zone-occupancy) 1))
  )
  (:action empty_safe_zone
      :parameters ()
      :precondition (= (safe-zone-occupancy) (safe-zone-capacity))
      :effect (assign (safe-zone-occupancy) 0)
  )
  )